
name: Rollback migrations
description: "Rolls back migrations to a given SHA."
inputs:
  sha:
    required: true
    description: "The Git SHA to rollback to."
  environment:
    description: 'The environment to rollback in.'
    required: true
  aws-access-key-id:
    description: 'The AWS access key ID to use.'
    required: true
  aws-secret-access-key:
    description: 'The AWS secret access key to use.'
    required: true
  staging-subdomain:
    description: 'The subdomain to use for staging deploys.'
    required: true
    default: staging

runs:
  using: composite
  steps:
    # First, determine the latest revision as of the target SHA.
    # Then, check out the current sha and downgrade to the target revision.
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: pipenv
    - name: Install Pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Install dependencies
      shell: bash
      run: |
        cd ./copier_full_stack_app_fastapi_nextjs_terraform_aws_example
        pipenv sync
    - uses: ./.github/actions/load-secrets-into-env
      with:
        environment: ${{ inputs.environment }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        staging-subdomain: ${{ inputs.staging-subdomain }}
    - name: Get latest migration head for rollback SHA
      id: get-latest-revision
      shell: bash
      run: |
        cd ./copier_full_stack_app_fastapi_nextjs_terraform_aws_example
        revision=$(PIPENV_VERBOSITY=-1 pipenv run --quiet ./alembic/scripts/latest-head.sh)
        echo "::set-output name=revision::$revision"
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.sha }}
    - uses: ./.github/actions/run-migrations
      with:
        environment: ${{ inputs.environment }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        staging-subdomain: ${{ inputs.staging-subdomain }}
        command: downgrade
        revision: ${{ steps.get-latest-revision.outputs.revision }}