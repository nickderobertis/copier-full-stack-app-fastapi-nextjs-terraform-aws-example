
name: Sets up for API Integration Tests with Database
description: "Sets up for API Integration Tests with Database"
inputs:
  environment:
    description: 'The environment to deploy in.'
    required: true
  aws-access-key-id:
    description: 'The AWS access key ID to use.'
    required: true
  aws-secret-access-key:
    description: 'The AWS secret access key to use.'
    required: true
  staging-subdomain:
    description: 'The subdomain to use for staging deploys.'
    required: true
    default: staging

runs:
  using: composite
  steps:
    - uses: ./.github/actions/load-secrets-into-env
      with:
        environment: ${{ inputs.environment }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        staging-subdomain: ${{ inputs.staging-subdomain }}
    - name: Set compose file
      shell: bash
      run: |
          echo "COMPOSE_FILE=docker-compose.yml:docker-compose.dev.yml" >> $GITHUB_ENV
    - name: Build docker containers
      shell: bash
      run: docker-compose build
    - name: Run database container
      shell: bash
      run: docker-compose up -d database
    - name: Put API secrets into .env file
      shell: bash
      run: |
        # TODO: Figure out how we can avoid having to explicitly reference secrets.
        #  Pretty sure it is not working with all secrets because of the multi-line openvpn config secret
        printenv | grep EMAIL_ > copier_full_stack_app_fastapi_nextjs_terraform_aws_example/.env
        printenv | grep FE_URL >> copier_full_stack_app_fastapi_nextjs_terraform_aws_example/.env
    - name: Wait for DB to be ready
      shell: bash
      run: |
        docker-compose run --rm api pipenv run python -m app.database.wait
